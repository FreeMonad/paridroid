<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string name="app_name">PariDroid</string>
  <string name="settings">Settings</string>
  <string name="max_prime">MaxPrime</string>
  <string name="stack_size">StackSize</string>
  <string name="real_precision">RealPrecision</string>
  <string name="series_precision">SeriesPrecision</string>
  <string name="documentation">Documentation</string>
  <string name="license">License</string>
  <string-array name="conversions">
    <item>binary(x)</item>
    <item>bitand(x,y)</item>
    <item>bitneg(x,{n=-1})</item>
    <item>bitnegimply(x,y)</item>
    <item>bitor(x,y)</item>
    <item>bittest(x,n)</item>
    <item>bitxor(x,y)</item>
    <item>ceil(x)</item>
    <item>centerlift(x,{v})</item>
    <item>component(x,n)</item>
    <item>conj(x)</item>
    <item>conjvec(z)</item>
    <item>denominator(x)</item>
    <item>floor(x)</item>
    <item>frac(x)</item>
    <item>imag(x)</item>
    <item>length(x)</item>
    <item>lift(x,{v})</item>
    <item>norm(x)</item>
    <item>norml2(x)</item>
    <item>numerator(x)</item>
    <item>numtoperm(n,k)</item>
    <item>padicprec(x,p)</item>
    <item>permtonum(x)</item>
    <item>precision(x,{n})</item>
    <item>random({N=2^31})</item>
    <item>real(x,{e})</item>
    <item>round(x)</item>
    <item>simplify(x)</item>
    <item>sizebyte(x)</item>
    <item>sizedigit(x)</item>
    <item>truncate(x,{e})</item>
    <item>valuation(x,p)</item>
    <item>variable({x})</item>
  </string-array>
  <string-array name="elliptic_curves">
    <item>elladd(E,z1,z2)</item>
    <item>ellak(E,n)</item>
    <item>ellan(E,n)</item>
    <item>ellanalyticrank(e, {eps})</item>
    <item>ellap(E,{p})</item>
    <item>ellbil(E,z1,z2)</item>
    <item>ellchangecurve(E,v)</item>
    <item>ellchangepoint(x,v)</item>
    <item>ellconvertname(name)</item>
    <item>elldivpol(E,n,{v=x})</item>
    <item>elleisnum(E,k,{flag=0})</item>
    <item>elleta(om)</item>
    <item>ellgenerators(E)</item>
    <item>ellglobalred(E)</item>
    <item>ellgroup(E,{p})</item>
    <item>ellheegner(E)</item>
    <item>ellheight(E,x,{flag=2})</item>
    <item>ellheightmatrix(E,x)</item>
    <item>ellidentify(E)</item>
    <item>ellinit(x,{flag=0})</item>
    <item>ellisoncurve(E,z)</item>
    <item>ellj(x)</item>
    <item>ellL1(e, r)</item>
    <item>elllocalred(E,p)</item>
    <item>elllog(E,P,G,{o})</item>
    <item>elllseries(E,s,{A=1})</item>
    <item>ellminimalmodel(E,{v})</item>
    <item>ellmodulareqn(l,{x},{y})</item>
    <item>ellorder(E,z,{o})</item>
    <item>ellordinate(E,x)</item>
    <item>ellpointtoz(E,P)</item>
    <item>ellpow(E,z,n)</item>
    <item>ellrootno(E,{p})</item>
    <item>ellsearch(N)</item>
    <item>ellsigma(E,{z=x},{flag=0})</item>
    <item>ellsub(E,z1,z2)</item>
    <item>elltaniyama(E, {d = seriesprecision})</item>
    <item>elltatepairing(E, P, Q, m)</item>
    <item>elltors(E,{flag=0})</item>
    <item>ellweilpairing(E, P, Q, m)</item>
    <item>ellwp(E,{z=x},{flag=0})</item>
    <item>ellzeta(E,{z=x})</item>
    <item>ellztopoint(E,z)</item>
  </string-array>
  <string-array name="linear_algebra">
    <item>algdep(x,k,{flag=0})</item>
    <item>charpoly(A,{v=x},{flag=3})</item>
    <item>concat(x,{y})</item>
    <item>lindep(x,{flag=0})</item>
    <item>listcreate()</item>
    <item>listinsert(L,x,n)</item>
    <item>listkill(L)</item>
    <item>listpop(list,{n})</item>
    <item>listput(list,x,{n})</item>
    <item>listsort(L,{flag=0})</item>
    <item>matadjoint(x,{flag=0})</item>
    <item>matcompanion(x)</item>
    <item>matdet(x,{flag=0})</item>
    <item>matdetint(x)</item>
    <item>matdiagonal(x)</item>
    <item>mateigen(x)</item>
    <item>matfrobenius(M,{flag},{v=x})</item>
    <item>mathess(x)</item>
    <item>mathilbert(n)</item>
    <item>mathnf(M,{flag=0})</item>
    <item>mathnfmod(x,d)</item>
    <item>mathnfmodid(x,d)</item>
    <item>matid(n)</item>
    <item>matimage(x,{flag=0})</item>
    <item>matimagecompl(x)</item>
    <item>matindexrank(x)</item>
    <item>matintersect(x,y)</item>
    <item>matinverseimage(x,y)</item>
    <item>matisdiagonal(x)</item>
    <item>matker(x,{flag=0})</item>
    <item>matkerint(x,{flag=0})</item>
    <item>matmuldiagonal(x,d)</item>
    <item>matmultodiagonal(x,y)</item>
    <item>matpascal(n,{q})</item>
    <item>matrank(x)</item>
    <item>matrix(m,n,{X},{Y},{expr=0})</item>
    <item>matrixqz(A,{p=0})</item>
    <item>matsize(x)</item>
    <item>matsnf(X,{flag=0})</item>
    <item>matsolve(M,B)</item>
    <item>matsolvemod(M,D,B,{flag=0})</item>
    <item>matsupplement(x)</item>
    <item>mattranspose(x)</item>
    <item>minpoly(A,{v=x})</item>
    <item>qfgaussred(q)</item>
    <item>qfjacobi(x)</item>
    <item>qflll(x,{flag=0})</item>
    <item>qflllgram(G,{flag=0})</item>
    <item>qfminim(x,{b},{m},{flag=0})</item>
    <item>qfperfection(G)</item>
    <item>qfrep(q,B,{flag=0})</item>
    <item>qfsign(x)</item>
    <item>setintersect(x,y)</item>
    <item>setisset(x)</item>
    <item>setminus(x,y)</item>
    <item>setsearch(S,x,{flag=0})</item>
    <item>setunion(x,y)</item>
    <item>trace(x)</item>
    <item>vecextract(x,y,{z})</item>
    <item>vecsearch(v,x,{cmpf})</item>
    <item>vecsort(x,{cmpf},{flag=0})</item>
    <item>vector(n,{X},{expr=0})</item>
    <item>vectorsmall(n,{X},{expr=0})</item>
    <item>vectorv(n,{X},{expr=0})</item>
  </string-array>
  <string-array name="number_fields">
    <item>bnfcertify(bnf,{flag = 0})</item>
    <item>bnfcompress(bnf)</item>
    <item>bnfdecodemodule(nf,m)</item>
    <item>bnfinit(P,{flag=0},{tech=[]})</item>
    <item>bnfisintnorm(bnf,x)</item>
    <item>bnfisnorm(bnf,x,{flag=1})</item>
    <item>bnfisprincipal(bnf,x,{flag=1})</item>
    <item>bnfissunit(bnf,sfu,x)</item>
    <item>bnfisunit(bnf,x)</item>
    <item>bnfnarrow(bnf)</item>
    <item>bnfsignunit(bnf)</item>
    <item>bnfsunit(bnf,S)</item>
    <item>bnrclassno(bnf,I)</item>
    <item>bnrclassnolist(bnf,list)</item>
    <item>bnrconductor(A,{B},{C},{flag=0})</item>
    <item>bnrconductorofchar(bnr,chi)</item>
    <item>bnrdisc(A,{B},{C},{flag=0})</item>
    <item>bnrdisclist(bnf,bound,{arch})</item>
    <item>bnrinit(bnf,f,{flag=0})</item>
    <item>bnrisconductor(A,{B},{C})</item>
    <item>bnrisprincipal(bnr,x,{flag=1})</item>
    <item>bnrL1(bnr, {H}, {flag=0})</item>
    <item>bnrrootnumber(bnr,chi,{flag=0})</item>
    <item>bnrstark(bnr,{subgroup})</item>
    <item>dirzetak(nf,b)</item>
    <item>factornf(x,t)</item>
    <item>galoisexport(gal,{flag})</item>
    <item>galoisfixedfield(gal,perm,{flag},{v=y})</item>
    <item>galoisgetpol(a,{b},{s})</item>
    <item>galoisidentify(gal)</item>
    <item>galoisinit(pol,{den})</item>
    <item>galoisisabelian(gal,{flag=0})</item>
    <item>galoisisnormal(gal,subgrp)</item>
    <item>galoispermtopol(gal,perm)</item>
    <item>galoissubcyclo(N,H,{fl=0},{v})</item>
    <item>galoissubfields(G,{flags=0},{v})</item>
    <item>galoissubgroups(G)</item>
    <item>idealadd(nf,x,y)</item>
    <item>idealaddtoone(nf,x,{y})</item>
    <item>idealappr(nf,x,{flag=0})</item>
    <item>idealchinese(nf,x,y)</item>
    <item>idealcoprime(nf,x,y)</item>
    <item>idealdiv(nf,x,y,{flag=0})</item>
    <item>idealfactor(nf,x)</item>
    <item>idealfactorback(nf,f,{e},{flag = 0})</item>
    <item>idealfrobenius(nf,gal,pr)</item>
    <item>idealhnf(nf,u,{v})</item>
    <item>idealintersect(nf,A,B)</item>
    <item>idealinv(nf,x)</item>
    <item>ideallist(nf,bound,{flag=4})</item>
    <item>ideallistarch(nf,list,arch)</item>
    <item>ideallog(nf,x,bid)</item>
    <item>idealmin(nf,ix,{vdir})</item>
    <item>idealmul(nf,x,y,{flag=0})</item>
    <item>idealnorm(nf,x)</item>
    <item>idealnumden(nf,x)</item>
    <item>idealpow(nf,x,k,{flag=0})</item>
    <item>idealprimedec(nf,p)</item>
    <item>idealramgroups(nf,gal,pr)</item>
    <item>idealred(nf,I,{v=0})</item>
    <item>idealstar(nf,I,{flag=1})</item>
    <item>idealtwoelt(nf,x,{a})</item>
    <item>idealval(nf,x,pr)</item>
    <item>matalgtobasis(nf,x)</item>
    <item>matbasistoalg(nf,x)</item>
    <item>modreverse(z)</item>
    <item>newtonpoly(x,p)</item>
    <item>nfalgtobasis(nf,x)</item>
    <item>nfbasis(T,{flag=0},{fa})</item>
    <item>nfbasistoalg(nf,x)</item>
    <item>nfdetint(nf,x)</item>
    <item>nfdisc(T,{flag=0},{fa})</item>
    <item>nfadd(nf,x,y)</item>
    <item>nfdiv(nf,x,y)</item>
    <item>nfdiveuc(nf,x,y)</item>
    <item>nfeltdivmodpr(nf,x,y,pr)</item>
    <item>nfeltdivrem(nf,x,y)</item>
    <item>nfeltmod(nf,x,y)</item>
    <item>nfmul(nf,x,y)</item>
    <item>nfeltmulmodpr(nf,x,y,pr)</item>
    <item>nfeltnorm(nf,x)</item>
    <item>nfeltpow(nf,x,k)</item>
    <item>nfeltpowmodpr(nf,x,k,pr)</item>
    <item>nfeltreduce(nf,a,id)</item>
    <item>nfeltreducemodpr(nf,x,pr)</item>
    <item>nfelttrace(nf,x)</item>
    <item>nfeltval(nf,x,pr)</item>
    <item>nffactor(nf,T)</item>
    <item>nffactorback(nf,f,{e})</item>
    <item>nffactormod(nf,pol,pr)</item>
    <item>nfgaloisapply(nf,aut,x)</item>
    <item>nfgaloisconj(nf,{flag=0},{d})</item>
    <item>nfhilbert(nf,a,b,{pr})</item>
    <item>nfhnf(nf,x)</item>
    <item>nfhnfmod(nf,x,detx)</item>
    <item>nfinit(pol,{flag=0})</item>
    <item>nfisideal(nf,x)</item>
    <item>nfisincl(x,y)</item>
    <item>nfisisom(x,y)</item>
    <item>nfkermodpr(nf,x,pr)</item>
    <item>nfmodprinit(nf,pr)</item>
    <item>nfnewprec(nf)</item>
    <item>nfroots({nf},x)</item>
    <item>nfrootsof1(nf)</item>
    <item>nfsnf(nf,x)</item>
    <item>nfsolvemodpr(nf,a,b,pr)</item>
    <item>nfsubfields(pol,{d=0})</item>
    <item>polcompositum(P,Q,{flag=0})</item>
    <item>polgalois(T)</item>
    <item>polred(x,{flag=0},{fa})</item>
    <item>polredabs(T,{flag=0})</item>
    <item>polredbest(T,{flag=0})</item>
    <item>polredord(x)</item>
    <item>poltschirnhaus(x)</item>
    <item>rnfalgtobasis(rnf,x)</item>
    <item>rnfbasis(bnf,M)</item>
    <item>rnfbasistoalg(rnf,x)</item>
    <item>rnfcharpoly(nf,T,a,{var=x})</item>
    <item>rnfconductor(bnf,pol)</item>
    <item>rnfdedekind(nf,pol,{pr},{flag=0})</item>
    <item>rnfdet(nf,M)</item>
    <item>rnfdisc(nf,pol)</item>
    <item>rnfeltabstorel(rnf,x)</item>
    <item>rnfeltdown(rnf,x)</item>
    <item>rnfeltreltoabs(rnf,x)</item>
    <item>rnfeltup(rnf,x)</item>
    <item>rnfequation(nf,pol,{flag=0})</item>
    <item>rnfhnfbasis(bnf,x)</item>
    <item>rnfidealabstorel(rnf,x)</item>
    <item>rnfidealdown(rnf,x)</item>
    <item>rnfidealhnf(rnf,x)</item>
    <item>rnfidealmul(rnf,x,y)</item>
    <item>rnfidealnormabs(rnf,x)</item>
    <item>rnfidealnormrel(rnf,x)</item>
    <item>rnfidealreltoabs(rnf,x)</item>
    <item>rnfidealtwoelt(rnf,x)</item>
    <item>rnfidealup(rnf,x)</item>
    <item>rnfinit(nf,pol)</item>
    <item>rnfisabelian(nf,T)</item>
    <item>rnfisfree(bnf,x)</item>
    <item>rnfisnorm(T,a,{flag=0})</item>
    <item>rnfisnorminit(pol,polrel,{flag=2})</item>
    <item>rnfkummer(bnr,{subgp},{d=0})</item>
    <item>rnflllgram(nf,pol,order)</item>
    <item>rnfnormgroup(bnr,pol)</item>
    <item>rnfpolred(nf,pol)</item>
    <item>rnfpolredabs(nf,pol,{flag=0})</item>
    <item>rnfpseudobasis(nf,pol)</item>
    <item>rnfsteinitz(nf,x)</item>
    <item>subgrouplist(bnr,{bound},{flag=0})</item>
    <item>zetak(nfz,x,{flag=0})</item>
    <item>zetakinit(bnf)</item>
  </string-array>
  <string-array name="operators">
    <item>cmp(x,y)</item>
    <item>divrem(x,y,{v})</item>
    <item>lex(x,y)</item>
    <item>max(x,y)</item>
    <item>min(x,y)</item>
    <item>shift(x,n)</item>
    <item>shiftmul(x,n)</item>
    <item>sign(x)</item>
    <item>vecmax(x)</item>
    <item>vecmin(x)</item>
  </string-array>
  <string-array name="programming">
    <item>addhelp(sym,str)</item>
    <item>alarm({s = 0},{code})</item>
    <item>alias(newsym,sym)</item>
    <item>allocatemem({s=0})</item>
    <item>apply(f, A)</item>
    <item>break({n=1})</item>
    <item>dbg_down({n=1})</item>
    <item>dbg_up({n=1})</item>
    <item>dbg_x(A{,n})</item>
    <item>default({key},{val})</item>
    <item>errname(E)</item>
    <item>error({str}*)</item>
    <item>extern(str)</item>
    <item>externstr(str)</item>
    <item>for(X=a,b,seq)</item>
    <item>fordiv(n,X,seq)</item>
    <item>forell(E,a,b,seq)</item>
    <item>forprime(X=a,b,seq)</item>
    <item>forstep(X=a,b,s,seq)</item>
    <item>forsubgroup(H=G,{bound},seq)</item>
    <item>forvec(X=v,seq,{flag=0})</item>
    <item>getenv(s)</item>
    <item>getheap()</item>
    <item>getrand()</item>
    <item>getstack()</item>
    <item>gettime()</item>
    <item>global(list of variables)</item>
    <item>if(a,{seq1},{seq2})</item>
    <item>iferr(seq1,E,seq2)</item>
    <item>iferrname(str,seq1,E,seq2)</item>
    <item>input()</item>
    <item>install(name,code,{gpname},{lib})</item>
    <item>kill(sym)</item>
    <item>local(x,...,z)</item>
    <item>my(x,...,z)</item>
    <item>next({n=1})</item>
    <item>print({str}*)</item>
    <item>print1({str}*)</item>
    <item>printf(fmt,{x}*)</item>
    <item>printtex({str}*)</item>
    <item>quit({status = 0})</item>
    <item>read({filename})</item>
    <item>readvec({filename})</item>
    <item>return({x=0})</item>
    <item>select(f, A)</item>
    <item>setrand(n)</item>
    <item>system(str)</item>
    <item>trap({e}, {rec}, seq)</item>
    <item>type(x)</item>
    <item>until(a,seq)</item>
    <item>version()</item>
    <item>warning({str}*)</item>
    <item>whatnow(key)</item>
    <item>while(a,seq)</item>
    <item>write(filename,{str}*)</item>
    <item>write1(filename,{str}*)</item>
    <item>writebin(filename,{x})</item>
    <item>writetex(filename,{str}*)</item>
  </string-array>
  <string-array name="symbolic_operators">
    <item>f(a,b,...)</item>
    <item>x[y,]</item>
    <item>x</item>
    <item>n!</item>
    <item>a === b </item>
    <item>x~</item>
  </string-array>
  <string-array name="number_theoretical">
    <item>addprimes({x=[]})</item>
    <item>bestappr(x, {B})</item>
    <item>bestappr(x, {B})</item>
    <item>bezout(x,y)</item>
    <item>bezoutres(x,y)</item>
    <item>bigomega(x)</item>
    <item>binomial(x,y)</item>
    <item>chinese(x,{y})</item>
    <item>content(x)</item>
    <item>contfrac(x,{b},{nmax})</item>
    <item>contfracpnqn(x)</item>
    <item>core(n,{flag=0})</item>
    <item>coredisc(n,{flag=0})</item>
    <item>dirdiv(x,y)</item>
    <item>direuler(p=a,b,expr,{c})</item>
    <item>dirmul(x,y)</item>
    <item>divisors(x)</item>
    <item>eulerphi(x)</item>
    <item>factor(x,{lim})</item>
    <item>factorback(f,{e})</item>
    <item>factorcantor(x,p)</item>
    <item>factorff(x,{p},{a})</item>
    <item>factorial(x)</item>
    <item>factorint(x,{flag=0})</item>
    <item>factormod(x,p,{flag=0})</item>
    <item>ffgen(P,{v})</item>
    <item>ffinit(p,n,{v=x})</item>
    <item>fflog(x,g,{o})</item>
    <item>fforder(x,{o})</item>
    <item>ffprimroot(x, {o})</item>
    <item>fibonacci(x)</item>
    <item>gcd(x,{y})</item>
    <item>hilbert(x,y,{p})</item>
    <item>isfundamental(x)</item>
    <item>ispower(x,{k},{n})</item>
    <item>isprime(x,{flag=0})</item>
    <item>ispseudoprime(x,{flag})</item>
    <item>issquare(x,{n})</item>
    <item>issquarefree(x)</item>
    <item>kronecker(x,y)</item>
    <item>lcm(x,{y})</item>
    <item>moebius(x)</item>
    <item>nextprime(x)</item>
    <item>numbpart(n)</item>
    <item>numdiv(x)</item>
    <item>omega(x)</item>
    <item>partitions(n,{restr=0})</item>
    <item>polrootsff(x,{p},{a})</item>
    <item>precprime(x)</item>
    <item>prime(n)</item>
    <item>primepi(x)</item>
    <item>primes(x)</item>
    <item>qfbclassno(D,{flag=0})</item>
    <item>qfbcompraw(x,y)</item>
    <item>qfbhclassno(x)</item>
    <item>qfbnucomp(x,y,L)</item>
    <item>qfbnupow(x,n)</item>
    <item>qfbpowraw(x,n)</item>
    <item>qfbprimeform(x,p)</item>
    <item>qfbred(x,{flag=0},{d},{isd},{sd})</item>
    <item>qfbsolve(Q,p)</item>
    <item>quadclassunit(D,{flag=0},{tech=[]})</item>
    <item>quaddisc(x)</item>
    <item>quadgen(D)</item>
    <item>quadhilbert(D)</item>
    <item>quadpoly(D,{v=x})</item>
    <item>quadray(D,f)</item>
    <item>quadregulator(x)</item>
    <item>quadunit(D)</item>
    <item>removeprimes({x=[]})</item>
    <item>sigma(x,{k=1})</item>
    <item>sqrtint(x)</item>
    <item>stirling(n,k,{flag=1})</item>
    <item>sumdedekind(h,k)</item>
    <item>zncoppersmith(P, N, X, {B=N})</item>
    <item>znlog(x,g,{o})</item>
    <item>znorder(x,{o})</item>
    <item>znprimroot(n)</item>
    <item>znstar(n)</item>
  </string-array>
  <string-array name="polynomials">
    <item>deriv(x,{v})</item>
    <item>diffop(x,v,d,{n=1})</item>
    <item>eval(x)</item>
    <item>factorpadic(pol,p,r,{flag=0})</item>
    <item>intformal(x,{v})</item>
    <item>padicappr(pol,a)</item>
    <item>padicfields(p, N, {flag=0})</item>
    <item>polchebyshev(n,{flag=1},{a=x})</item>
    <item>polcoeff(x,n,{v})</item>
    <item>polcyclo(n,{a = x})</item>
    <item>poldegree(x,{v})</item>
    <item>poldisc(pol,{v})</item>
    <item>poldiscreduced(f)</item>
    <item>polhensellift(A, B, p, e)</item>
    <item>polhermite(n,{a=x})</item>
    <item>polinterpolate(X,{Y},{x},{e})</item>
    <item>polisirreducible(pol)</item>
    <item>pollead(x,{v})</item>
    <item>pollegendre(n,{a=x})</item>
    <item>polrecip(pol)</item>
    <item>polresultant(x,y,{v},{flag=0})</item>
    <item>polroots(x)</item>
    <item>polrootsmod(pol,p,{flag=0})</item>
    <item>polrootspadic(x,p,r)</item>
    <item>polsturm(pol,{a},{b})</item>
    <item>polsubcyclo(n,d,{v=x})</item>
    <item>polsylvestermatrix(x,y)</item>
    <item>polsym(x,n)</item>
    <item>poltchebi(n,{v=x})</item>
    <item>polzagier(n,m)</item>
    <item>serconvol(x,y)</item>
    <item>serlaplace(x)</item>
    <item>serreverse(x)</item>
    <item>subst(x,y,z)</item>
    <item>substpol(x,y,z)</item>
    <item>substvec(x,v,w)</item>
    <item>taylor(x,t,{d=seriesprecision})</item>
    <item>thue(tnf,a,{sol})</item>
    <item>thueinit(P,{flag=0})</item>
  </string-array>
  <string-array name="sums">
    <item>derivnum(X=a,expr)</item>
    <item>intcirc(X=a,R,expr,{tab})</item>
    <item>intfouriercos(X=a,b,z,expr,{tab})</item>
    <item>intfourierexp(X=a,b,z,expr,{tab})</item>
    <item>intfouriersin(X=a,b,z,expr,{tab})</item>
    <item>intfuncinit(X=a,b,expr,{flag=0},{m=0})</item>
    <item>intlaplaceinv(X=sig,z,expr,{tab})</item>
    <item>intmellininv(X=sig,z,expr,{tab})</item>
    <item>intmellininvshort(sig,z,tab)</item>
    <item>intnum(X=a,b,expr,{tab})</item>
    <item>intnuminit(a,b,{m=0})</item>
    <item>intnuminitgen(t,a,b,ph,{m=0},{flag=0})</item>
    <item>intnumromb(X=a,b,expr,{flag=0})</item>
    <item>intnumstep()</item>
    <item>prod(X=a,b,expr,{x=1})</item>
    <item>prodeuler(X=a,b,expr)</item>
    <item>prodinf(X=a,expr,{flag=0})</item>
    <item>solve(X=a,b,expr)</item>
    <item>sum(X=a,b,expr,{x=0})</item>
    <item>sumalt(X=a,expr,{flag=0})</item>
    <item>sumdiv(n,X,expr)</item>
    <item>suminf(X=a,expr)</item>
    <item>sumnum(X=a,sig,expr,{tab},{flag=0})</item>
    <item>sumnumalt(X=a,sig,expr,{tab},{flag=0})</item>
    <item>sumnuminit(sig, {m=0}, {sgn=1})</item>
    <item>sumpos(X=a,expr,{flag=0})</item>
  </string-array>
  <string-array name="transcendental">
    <item>abs(x)</item>
    <item>acos(x)</item>
    <item>acosh(x)</item>
    <item>agm(x,y)</item>
    <item>arg(x)</item>
    <item>asin(x)</item>
    <item>asinh(x)</item>
    <item>atan(x)</item>
    <item>atanh(x)</item>
    <item>bernfrac(x)</item>
    <item>bernreal(x)</item>
    <item>bernvec(x)</item>
    <item>besselh1(nu,x)</item>
    <item>besselh2(nu,x)</item>
    <item>besseli(nu,x)</item>
    <item>besselj(nu,x)</item>
    <item>besseljh(n,x)</item>
    <item>besselk(nu,x)</item>
    <item>besseln(nu,x)</item>
    <item>cos(x)</item>
    <item>cosh(x)</item>
    <item>cotan(x)</item>
    <item>dilog(x)</item>
    <item>eint1(x,{n})</item>
    <item>erfc(x)</item>
    <item>eta(z,{flag=0})</item>
    <item>exp(x)</item>
    <item>gamma(s)</item>
    <item>gammah(x)</item>
    <item>hyperu(a,b,x)</item>
    <item>incgam(s,x,{y})</item>
    <item>incgamc(s,x)</item>
    <item>lngamma(x)</item>
    <item>log(x)</item>
    <item>polylog(m,x,{flag=0})</item>
    <item>psi(x)</item>
    <item>sin(x)</item>
    <item>sinh(x)</item>
    <item>sqr(x)</item>
    <item>sqrt(x)</item>
    <item>sqrtn(x,n,{z})</item>
    <item>tan(x)</item>
    <item>tanh(x)</item>
    <item>teichmuller(x)</item>
    <item>theta(q,z)</item>
    <item>thetanullk(q,k)</item>
    <item>weber(x,{flag=0})</item>
    <item>zeta(s)</item>
  </string-array>
</resources>